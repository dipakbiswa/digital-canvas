"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./components/App.jsx":
/*!****************************!*\
  !*** ./components/App.jsx ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _MessageList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MessageList */ \"(app-pages-browser)/./components/MessageList.jsx\");\n/* harmony import */ var _InputArea__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./InputArea */ \"(app-pages-browser)/./components/InputArea.jsx\");\n/* harmony import */ var _Sidebar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sidebar */ \"(app-pages-browser)/./components/Sidebar.jsx\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _ModelSelector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ModelSelector */ \"(app-pages-browser)/./components/ModelSelector.jsx\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _firebase_config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../firebase/config */ \"(app-pages-browser)/./firebase/config.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n/* harmony import */ var _context_AuthContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/context/AuthContext */ \"(app-pages-browser)/./context/AuthContext.jsx\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! https */ \"(app-pages-browser)/./node_modules/next/dist/compiled/https-browserify/index.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dynamic */ \"(app-pages-browser)/./node_modules/next/dist/api/app-dynamic.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst App = ()=>{\n    _s();\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isStreaming, setIsStreaming] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [model, setModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"gemini-1.5-flash\");\n    const [temperature, setTemperature] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0.3);\n    const [uploadedImage, setUploadedImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [selectedMLModel, setSelectedMLModel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [modelSuggestions, setModelSuggestions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isSpeaking, setIsSpeaking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const messagesEndRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const chatRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isSidebarOpen, setIsSidebarOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentConversationId, setCurrentConversationId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const { user } = (0,_context_AuthContext__WEBPACK_IMPORTED_MODULE_11__.useAuthContext)();\n    // const API_KEY = \"AIzaSyBXMvHjeo0yTJ5EhjZeBXmIXKlMHFVdH6k\";\n    const API_KEY = \"AIzaSyBXMvHjeo0yTJ5EhjZeBXmIXKlMHFVdH6k\";\n    // console.log(API_KEY);\n    const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.GoogleGenerativeAI(API_KEY);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"App.useEffect\": ()=>{\n            var _messagesEndRef_current;\n            (_messagesEndRef_current = messagesEndRef.current) === null || _messagesEndRef_current === void 0 ? void 0 : _messagesEndRef_current.scrollIntoView({\n                behavior: \"smooth\"\n            });\n        }\n    }[\"App.useEffect\"], [\n        messages\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"App.useEffect\": ()=>{\n            initChat();\n        }\n    }[\"App.useEffect\"], [\n        model,\n        temperature\n    ]);\n    const initChat = async ()=>{\n        const geminiModel = genAI.getGenerativeModel({\n            model: model\n        });\n        chatRef.current = geminiModel.startChat({\n            generationConfig: {\n                temperature: temperature\n            }\n        });\n    };\n    const speakMessage = (text)=>{\n        if (isSpeaking) {\n            window.speechSynthesis.cancel();\n        }\n        const cleanText = text.replace(/\\*\\*/g, \"\");\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.onstart = ()=>setIsSpeaking(true);\n        utterance.onend = ()=>setIsSpeaking(false);\n        window.speechSynthesis.speak(utterance);\n    };\n    const stopSpeech = ()=>{\n        window.speechSynthesis.cancel();\n        setIsSpeaking(false);\n    };\n    const selectMLModel = (command)=>{\n        const modelMap = {\n            \"\\\\help\": \"help\",\n            \"\\\\object-recognition\": \"object-recognition\",\n            \"\\\\face-detection\": \"face-detection\",\n            \"\\\\face-emotion-detection\": \"face-emotion-detection\",\n            \"\\\\handwriting-detection\": \"handwriting-detection\",\n            \"\\\\food-nutrition\": \"food-nutrition\",\n            \"\\\\object-detection-img-op\": \"object-detection-img-op\",\n            \"\\\\deepfake-detection\": \"deepfake-detection\",\n            \"\\\\ai-detection\": \"ai-detection\"\n        };\n        const [modelCommand, ...promptParts] = command.split(\" \");\n        const selectedModel = modelMap[modelCommand];\n        const userPrompt = promptParts.join(\" \").trim();\n        return {\n            model: selectedModel,\n            prompt: userPrompt\n        };\n    };\n    const processImageWithModel = async (mlModel, userPrompt)=>{\n        if (!uploadedImage) {\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: \"Please upload an image first.\"\n                    }\n                ]);\n            return;\n        }\n        setIsStreaming(true);\n        try {\n            const imageData = await fileToGenerativePart(uploadedImage);\n            const geminiModel = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n            });\n            let prompt;\n            switch(mlModel){\n                case \"help\":\n                    userHelp();\n                    break;\n                case \"object-recognition\":\n                    prompt = userPrompt || \"Identify and list the objects in this image.\";\n                    handleGeminiWork(prompt);\n                    break;\n                case \"face-detection\":\n                    prompt = userPrompt || \"Detect and describe the faces in this image.\";\n                    handleGeminiWork(prompt);\n                    break;\n                case \"face-emotion-detection\":\n                    prompt = userPrompt || \"Detect faces and describe their emotions in this image.\";\n                    handleGeminiWork(prompt);\n                    break;\n                case \"handwriting-detection\":\n                    prompt = userPrompt || \"Detect and transcribe any handwritten text in this image.\";\n                    handleGeminiWork(prompt);\n                    break;\n                case \"food-nutrition\":\n                    prompt = userPrompt;\n                    console.log(prompt);\n                    foodNutrition();\n                    break;\n                case \"object-detection-img-op\":\n                    objectDetectionImgOutput();\n                    break;\n                case \"deepfake-detection\":\n                    deepfakeDetection();\n                    break;\n                case \"ai-detection\":\n                    aiDetection();\n                    break;\n                    break;\n                default:\n                    throw new Error(\"Invalid ML model selected\");\n            }\n            function userHelp() {\n                const helpText = \"\\\\object-recognition: Object recognition model. prompt needed. \\n \\\\face-detection: Face detection model. prompt needed. \\n \\\\face-emotion-detection: Face emotion detection mode. Prompt needed. \\n \\\\handwriting-detection: Handwriting detection model. Prompt needed.\\n \\\\food-nutrition: Food nutrition detection model. Prompt needed.\\n \\\\object-detection-img-op: Object detection with image output. Prompt not needed. \\n \";\n                setMessages((prev)=>[\n                        ...prev,\n                        {\n                            role: \"assistant\",\n                            content: helpText\n                        }\n                    ]);\n            }\n            async function handleGeminiWork(prompt) {\n                const result = await geminiModel.generateContent([\n                    prompt,\n                    {\n                        inlineData: {\n                            data: imageData,\n                            mimeType: uploadedImage.type\n                        }\n                    }\n                ]);\n                const response = await result.response;\n                const text = response.text();\n                setMessages((prev)=>[\n                        ...prev,\n                        {\n                            role: \"assistant\",\n                            content: text\n                        }\n                    ]);\n            }\n            async function foodNutrition() {\n                const formData = new FormData();\n                formData.append(\"image\", uploadedImage);\n                const foodvisor_api = \"m4cKLZSr.Jhac11mupXVwocJHKpYx5UVJ3jC1mLxI\";\n                try {\n                    const apiResponse = await axios__WEBPACK_IMPORTED_MODULE_14__[\"default\"].post(\"/foodvisor-api/1.0/en/analysis/\", formData, {\n                        headers: {\n                            Authorization: \"Api-Key \".concat(foodvisor_api),\n                            \"Content-Type\": \"multipart/form-data\"\n                        }\n                    });\n                    const foodData = apiResponse.data.items[0].food[0].food_info;\n                    const foodDataJSON = JSON.stringify(foodData);\n                    // console.log(foodDataJSON);\n                    const result = await geminiModel.generateContent([\n                        \"from this food data as json \".concat(foodDataJSON, \" and answer this question and don't provide any clue about the json data: \").concat(prompt)\n                    ]);\n                    const response = await result.response;\n                    const text = response.text();\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                content: text\n                            }\n                        ]);\n                } catch (error) {\n                    // setError(\"An error occurred while analyzing the image\");\n                    console.error(\"Error:\", error);\n                }\n            }\n            async function objectDetectionImgOutput() {\n                const formData = new FormData();\n                formData.append(\"image\", uploadedImage);\n                try {\n                    const apiResponse = await axios__WEBPACK_IMPORTED_MODULE_14__[\"default\"].post(\"object-detection-img-op/detect\", formData);\n                    const image_url = apiResponse.data.image_url;\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                image: image_url\n                            }\n                        ]);\n                } catch (error) {\n                    console.log(error);\n                }\n            }\n            async function deepfakeDetection() {\n                const deepfake_api = \"6nfgA4gRtHgMRgknQsUneqZVZGF4ENef\";\n                const formData = new FormData();\n                formData.append(\"media\", uploadedImage);\n                formData.append(\"models\", \"deepfake\");\n                formData.append(\"api_user\", \"1280634117\");\n                formData.append(\"api_secret\", deepfake_api);\n                try {\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_14__[\"default\"].post(\"deepfake-detection/1.0/check.json\", formData, {\n                        headers: {\n                            \"Content-Type\": \"multipart/form-data\"\n                        }\n                    });\n                    const deepfakeScore = response.data.type.deepfake;\n                    // return response.data;\n                    const result = await geminiModel.generateContent([\n                        \"I am providing you a deepfake score. This score is a float between 0 and 1. The higher the value, the higher the confidence that the image is a deepfake, the score is: \".concat(deepfakeScore, \". Acording to that score generate a response for user that this image is deepfake or not, and don't provide internal details.\")\n                    ]);\n                    const geminiResponse = await result.response;\n                    const text = geminiResponse.text();\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                content: text\n                            }\n                        ]);\n                } catch (error) {\n                    console.error(\"Error:\", error);\n                    throw error;\n                }\n            }\n            async function aiDetection() {\n                const deepfake_api = \"6nfgA4gRtHgMRgknQsUneqZVZGF4ENef\";\n                const formData = new FormData();\n                formData.append(\"media\", uploadedImage);\n                formData.append(\"models\", \"genai\");\n                formData.append(\"api_user\", \"1280634117\");\n                formData.append(\"api_secret\", deepfake_api);\n                try {\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_14__[\"default\"].post(\"deepfake-detection/1.0/check.json\", formData, {\n                        headers: {\n                            \"Content-Type\": \"application/x-www-form-urlencoded\"\n                        }\n                    });\n                    const aiScore = response.data.type.ai_generated;\n                    const result = await geminiModel.generateContent([\n                        \"I am providing you a AI score. This score is a float between 0 and 1. The higher the value, the higher the confidence that the image is a AI generated image, the score is: \".concat(aiScore, \". Acording to that score generate a response for user that this image is AI generated or not, and don't provide internal details.\")\n                    ]);\n                    const geminiResponse = await result.response;\n                    const text = geminiResponse.text();\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                content: text\n                            }\n                        ]);\n                } catch (error) {\n                    console.error(\"Error:\", error);\n                    throw error;\n                }\n            }\n            async function suggestProducts() {\n                try {\n                    const prompt = \"only name the products with color found in this image\";\n                    console.log(\"Generating content with prompt:\", prompt);\n                    const result = await geminiModel.generateContent([\n                        prompt,\n                        {\n                            inlineData: {\n                                data: imageData,\n                                mimeType: uploadedImage.type\n                            }\n                        }\n                    ]);\n                    const response = await result.response;\n                    const text = response.text();\n                // console.log(\"Generated text:\", text);\n                // console.log(\"Fetching product suggestions from API\");\n                // const params = {\n                //   engine: \"google_shopping\",\n                //   q: text,\n                //   location: \"India\",\n                //   hl: \"en\",\n                //   gl: \"us\",\n                //   api_key:\n                //     \"94cee5c53c3d963cddffa474d78ccf12714f5478b507d26130dda982a78b9186\",\n                // };\n                // console.log(\"Attempting to fetch from SerpAPI with params:\", params);\n                // const apiResponse = await axios.get(\"suggest-product/search\", {\n                //   params,\n                // });\n                // console.log(\"API response received:\", apiResponse.status);\n                // const jsonData = apiResponse.data;\n                // console.log(\"API response data:\", jsonData);\n                // if (\n                //   jsonData.shopping_results &&\n                //   jsonData.shopping_results.length > 0\n                // ) {\n                //   const productSuggestions = jsonData.shopping_results\n                //     .slice(0, 5)\n                //     .map((item) => `${item.title} - $${item.price}`);\n                //   setMessages((prev) => [\n                //     ...prev,\n                //     {\n                //       role: \"assistant\",\n                //       content: `Based on the image, here are some product suggestions:\\n\\n${productSuggestions.join(\n                //         \"\\n\"\n                //       )}`,\n                //     },\n                //   ]);\n                // } else {\n                //   throw new Error(\"No shopping results found in the API response\");\n                // }\n                } catch (error) {\n                    console.error(\"Error in suggestProducts:\", error);\n                    let errorMessage = \"Sorry, I encountered an error while fetching product suggestions. Please try again later.\";\n                    if (error.response) {\n                        console.error(\"Error response:\", error.response.data);\n                        errorMessage += \" Error details: \" + JSON.stringify(error.response.data);\n                    }\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                content: errorMessage\n                            }\n                        ]);\n                }\n            }\n            async function findLocation() {\n                const prompt = \"find the name of the location in the image\";\n                const result = await geminiModel.generateContent([\n                    prompt,\n                    {\n                        inlineData: {\n                            data: imageData,\n                            mimeType: uploadedImage.type\n                        }\n                    }\n                ]);\n                const response = await result.response;\n                const text = response.text();\n                try {\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_14__[\"default\"].get(\"https://api.hasdata.com/scrape/google-maps/search\", {\n                        params: {\n                            q: text\n                        },\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"x-api-key\": \"61a324f8-a5eb-4b6e-893e-d008243f1484\"\n                        }\n                    });\n                    const apiResponse = response.data.localResults;\n                    // const result = await geminiModel.generateContent([\n                    //   `I am providing you a AI score. This score is a float between 0 and 1. The higher the value, the higher the confidence that the image is a AI generated image, the score is: ${aiScore}. Acording to that score generate a response for user that this image is AI generated or not, and don't provide internal details.`,\n                    // ]);\n                    // const geminiResponse = await result.response;\n                    // const text = geminiResponse.text();\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                content: text\n                            }\n                        ]);\n                } catch (error) {\n                    console.error(\"Error:\", error);\n                    throw error;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: \"Error processing the image: \".concat(error.message, \". Please try again.\")\n                    }\n                ]);\n        } finally{\n            setIsStreaming(false);\n        }\n    };\n    const handleSendMessage = async (message, file)=>{\n        let newMessages = [\n            ...messages\n        ];\n        if (file) {\n            setUploadedImage(file);\n            newMessages.push({\n                role: \"user\",\n                content: \"Image uploaded\",\n                file\n            });\n            setMessages(newMessages);\n        }\n        if (message) {\n            newMessages.push({\n                role: \"user\",\n                content: message\n            });\n            setMessages(newMessages);\n            if (message.startsWith(\"\\\\\")) {\n                const { model: mlModel, prompt: userPrompt } = selectMLModel(message);\n                if (mlModel) {\n                    setSelectedMLModel(mlModel);\n                    await processImageWithModel(mlModel, userPrompt);\n                } else {\n                    setMessages((prev)=>[\n                            ...prev,\n                            {\n                                role: \"assistant\",\n                                content: \"Invalid model command. Please try again.\"\n                            }\n                        ]);\n                }\n            } else if (uploadedImage) {\n                if (!message.startsWith(\"\\\\\")) {\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_6__.toast.success(\"Use a model from our model selector for more spacific results!\");\n                    await handleNonModelMessage(message);\n                }\n            // setMessages((prev) => [\n            //   ...prev,\n            //   {\n            //     role: \"assistant\",\n            //     content:\n            //       \"Please select a model using '\\\\model-name' before entering a prompt.\",\n            //   },\n            // ]);\n            } else {\n                // await handleGeminiWork(prompt);\n                await sendMessageToModel([\n                    {\n                        text: message\n                    }\n                ]);\n            }\n        }\n        // Save or update the conversation in Firebase\n        // if (user) {\n        //   if (currentConversationId) {\n        //     await updateConversation(currentConversationId, newMessages);\n        //   } else {\n        //     const newConversationId = await createConversation(newMessages);\n        //     setCurrentConversationId(newConversationId);\n        //   }\n        // }\n        async function handleNonModelMessage(prompt) {\n            const imageData = await fileToGenerativePart(uploadedImage);\n            const geminiModel = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n            });\n            const result = await geminiModel.generateContent([\n                prompt,\n                {\n                    inlineData: {\n                        data: imageData,\n                        mimeType: uploadedImage.type\n                    }\n                }\n            ]);\n            const response = await result.response;\n            const text = response.text();\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: text\n                    }\n                ]);\n        }\n    };\n    const sendMessageToModel = async (parts)=>{\n        setIsStreaming(true);\n        try {\n            const result = await chatRef.current.sendMessageStream(parts);\n            let fullResponse = \"\";\n            for await (const chunk of result.stream){\n                fullResponse += chunk.text();\n            }\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: fullResponse\n                    }\n                ]);\n        } catch (error) {\n            console.error(\"Error:\", error);\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        role: \"assistant\",\n                        content: \"Error: \".concat(error.message, \". Please try again.\")\n                    }\n                ]);\n        } finally{\n            setIsStreaming(false);\n        }\n    };\n    const fileToGenerativePart = (file)=>{\n        return new Promise((resolve)=>{\n            const reader = new FileReader();\n            reader.onloadend = ()=>resolve(reader.result.split(\",\")[1]);\n            reader.readAsDataURL(file);\n        });\n    };\n    const resetConversation = ()=>{\n        setMessages([]);\n        setUploadedImage(null);\n        setSelectedMLModel(null);\n        setCurrentConversationId(null);\n        initChat();\n    };\n    const handleInputChange = (inputValue)=>{\n        if (inputValue.startsWith(\"\\\\\")) {\n            const availableModels = [\n                \"\\\\help\",\n                \"\\\\object-recognition\",\n                \"\\\\face-detection\",\n                \"\\\\face-emotion-detection\",\n                \"\\\\handwriting-detection\",\n                \"\\\\food-nutrition\",\n                \"\\\\object-detection-img-op\",\n                \"\\\\deepfake-detection\",\n                \"\\\\ai-detection\",\n                \"\\\\suggest-product\",\n                \"\\\\find-location\"\n            ];\n            const filteredModels = availableModels.filter((model)=>model.startsWith(inputValue));\n            setModelSuggestions(filteredModels);\n        } else {\n            setModelSuggestions([]);\n        }\n    };\n    // const createConversation = async (messages) => {\n    //   const docRef = await addDoc(collection(db, \"conversations\"), {\n    //     userId: user.uid,\n    //     messages: messages,\n    //     createdAt: new Date(),\n    //     updatedAt: new Date(),\n    //     title: messages[0]?.content.slice(0, 30) || \"New Conversation\",\n    //   });\n    //   return docRef.id;\n    // };\n    // const updateConversation = async (conversationId, messages) => {\n    //   const conversationRef = doc(db, \"conversations\", conversationId);\n    //   await updateDoc(conversationRef, {\n    //     messages: messages,\n    //     updatedAt: new Date(),\n    //   });\n    // };\n    // const handleSelectConversation = async (conversation) => {\n    //   if (conversation) {\n    //     const conversationRef = doc(db, \"conversations\", conversation.id);\n    //     const conversationDoc = await getDoc(conversationRef);\n    //     if (conversationDoc.exists()) {\n    //       setMessages(conversationDoc.data().messages);\n    //       setCurrentConversationId(conversation.id);\n    //     }\n    //   } else {\n    //     resetConversation();\n    //   }\n    // };\n    const toggleSidebar = ()=>{\n        setIsSidebarOpen(!isSidebarOpen);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen bg-gray-100\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Sidebar__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                resetConversation: resetConversation,\n                // onSelectConversation={handleSelectConversation}\n                isOpen: isSidebarOpen,\n                toggleSidebar: toggleSidebar,\n                currentConversationId: currentConversationId\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                lineNumber: 606,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                        className: \"bg-white shadow-sm flex items-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center w-full\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                    className: \"text-2xl font-bold text-gray-900\",\n                                    children: \"\\uD83E\\uDD16 The Digital Canvas \\uD83D\\uDCAC\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                                    lineNumber: 616,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: toggleSidebar,\n                                    className: \"md:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"sr-only\",\n                                            children: \"Open sidebar\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                                            lineNumber: 623,\n                                            columnNumber: 15\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                            className: \"h-6 w-6\",\n                                            xmlns: \"http://www.w3.org/2000/svg\",\n                                            fill: \"none\",\n                                            viewBox: \"0 0 24 24\",\n                                            stroke: \"currentColor\",\n                                            \"aria-hidden\": \"true\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                strokeLinecap: \"round\",\n                                                strokeLinejoin: \"round\",\n                                                strokeWidth: \"2\",\n                                                d: \"M4 6h16M4 12h16M4 18h16\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                                                lineNumber: 632,\n                                                columnNumber: 17\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                                            lineNumber: 624,\n                                            columnNumber: 15\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                                    lineNumber: 619,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                            lineNumber: 615,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                        lineNumber: 614,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                        className: \"flex-1 overflow-y-auto p-4\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageList__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                            messages: messages,\n                            messagesEndRef: messagesEndRef,\n                            speakMessage: speakMessage,\n                            stopSpeech: stopSpeech,\n                            isSpeaking: isSpeaking\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                            lineNumber: 643,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                        lineNumber: 642,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ModelSelector__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        selectedModel: selectedMLModel\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                        lineNumber: 651,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_InputArea__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        onSendMessage: handleSendMessage,\n                        isStreaming: isStreaming,\n                        onInputChange: handleInputChange,\n                        modelSuggestions: modelSuggestions\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                        lineNumber: 652,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n                lineNumber: 613,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\dbisw\\\\OneDrive\\\\Desktop\\\\SIH\\\\new\\\\digital-canvas\\\\components\\\\App.jsx\",\n        lineNumber: 605,\n        columnNumber: 5\n    }, undefined);\n};\n_s(App, \"0OofiX2OBGM7rYH+ewXST4hpGnM=\", false, function() {\n    return [\n        _context_AuthContext__WEBPACK_IMPORTED_MODULE_11__.useAuthContext\n    ];\n});\n_c = App;\n// export default App;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_c2 = (0,next_dynamic__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(_c1 = ()=>Promise.resolve(App), {\n    ssr: false\n}));\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c1, \"%default%$dynamic\");\n$RefreshReg$(_c2, \"%default%\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/App.jsx\n"));

/***/ })

});